import java.util.List;
apply plugin: 'com.android.application'

def verCode = 1
def verName = "1.0"
def appId = "uk.co.mishurov.termik"

def getSdkDir() {
    def path
    def localProperties = new File("local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }
    return path
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId appId
        minSdkVersion 19
        targetSdkVersion 25
        versionCode verCode
        versionName verName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
                abiFilters "x86"
                //abiFilters "armeabi-v7a"
                //abiFilters "x86_64", "x86", "armeabi-v7a", "arm64-v8a"//, "armeabi", "mips", "mips64"
            }
        }
    }

    splits {
        // Configures multiple APKs based on ABI.
        abi {
            enable true
            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()
            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86"
            //include "armeabi-v7a"
            //include "x86_64", "x86", "armeabi-v7a", "arm64-v8a", "armeabi", "mips", "mips64"
            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
            manifest.srcFile 'src/main/AndroidManifest.xml'
            res.srcDirs = [
                'src/main/res'
            ]
            jniLibs.srcDirs = [
                '../distribution/opencv/sdk/native/libs',
                '../distribution/tensorflow/out/native/libtensorflow_demo.so',
                '../distribution/tensorflow/out/native/libtensorflow_inference.so',
            ]
            assets.srcDirs = ['src/main/assets']
            resources.srcDirs = []
            aidl.srcDirs = []
            renderscript.srcDirs = []
        }
    }
}


task unzipAssets(type: Copy) {
    from(zipTree('../distribution/tensorflow/out/tensorflow_demo.apk')) {
        include 'assets/tensorflow_inception_graph.pb'
        include 'assets/imagenet_comp_graph_label_strings.txt'
    }
    into 'build'
}

task zipAssets(type: Exec) {
    workingDir "build"
    def filename = "main.${verCode}.${appId}.obb"
    commandLine "jobb", "-d", "./assets", "-o", "${filename}", "-pn", "${appId}", "-pv", "${verCode}"
    standardOutput = new ByteArrayOutputStream()
}


def getADBPath() {
    def path = getSdkDir()
    def adb = path + "/platform-tools/adb"
    adb
}

task createOBBDir(type: Exec) {
    def adb = getADBPath();
    commandLine "$adb", 'shell', 'mkdir', '-p', "/mnt/sdcard/Android/obb/${appId}"
}
task uploadOBB(type: Exec) {
    def adb = getADBPath();
    commandLine "$adb", 'push', "build/main.${verCode}.${appId}.obb", "/mnt/sdcard/Android/obb/${appId}"
}

unzipAssets.dependsOn clean
zipAssets.dependsOn unzipAssets
createOBBDir.dependsOn zipAssets
uploadOBB.dependsOn createOBBDir

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile project(':downloader')
    compile project(':opencv')
    compile project(':tensorflow')
    testCompile 'junit:junit:4.12'
}
